-- Stored procedure definition script STORAGES.MAKE_REPBUHRE2RESECTION for Greenplum
-- Generated by (c) Ispirer SQLWays 6.0 Build 2145 32bit Licensed to ak
-- Timestamp: Thu Feb 20 09:37:21 2014

--Commented source
----CREATE PROCEDURE MAKE_REPBUHRE2RESECTION
----IS
----  vMinIsn number:=-1;
----  vMaxIsn number;
----
----  vSql varchar2(4000);
----  SesId Number;
----  vLoadObjCnt number:=1000;
----  vCnt number:=0;
----BEGIN
----  /*DELETE \*+ FULL ( a )*\ FROM storages.repbuhre2resection a;
----  COMMIT;*/
----  EXECUTE IMMEDIATE 'truncate table storages.repbuhre2resection reuse storage';
----
----  store_and_drop_table_index('storages.repbuhre2resection',1);
----  SesId:=Parallel_Tasks.createnewsession();
----
----  LOOP
----    vMaxIsn:=Cut_Table('ais.reaccsum','reaccisn',vMinIsn,pRowCount=>vLoadObjCnt);
----    EXIT WHEN vMaxIsn IS NULL;
----    vSql:= 'DECLARE
----              vMinIsn number :='||vMinIsn||';
----              vMaxIsn number :='||vMaxIsn||';
----              vCnt    number :='||vCnt||';
----            BEGIN
----              DBMS_APPLICATION_INFO.SET_MODULE(''repbuhre2resection'',''Precess#''||vCNT);
----
----              pparam.SetParamN(''MinIsn'', vMinIsn);
----              pparam.SetParamN(''MaxIsn'', vMaxIsn);
----
----              INSERT INTO storages.repbuhre2resection(
----                                            bodyisn,dateval,statcode,subaccisn,buhcurrisn,
----                                            buhdeptisn,buhamount,amount,docsumisn,docisn,
----                                            dssubjisn,dscurrisn,dsclassisn,dsclassisn2,docsumpc,
----                                            sectisn,secttype,sectdatebeg,sectdateend,sectcurrisn,sectpc,
----                                            reaccisn,reaccdatebeg,reaccdateend,agrisn,agrclassisn,datebase,agrdatebeg,
----                                            agrdateend, isrevaluation)  
----              SELECT bodyisn,dateval,statcode,subaccisn,buhcurrisn,
----                     buhdeptisn,buhamount,amount,docsumisn,docisn,
----                     dssubjisn,dscurrisn,dsclassisn,dsclassisn2,docsumpc,
----                     sectisn,secttype,sectdatebeg,sectdateend,sectcurrisn,sectpc,
----                     reaccisn,reaccdatebeg,reaccdateend,agrisn,agrclassisn,datebase,agrdatebeg,
----                     agrdateend, isrevaluation 
----              FROM storages.v_repbuhre2resection;
----              COMMIT;
----
----           END;';
----    System.Parallel_Tasks.processtask(sesid,vsql);
----    vCnt:=vCnt+1;
----    vMinIsn:=vMaxIsn;
----    DBMS_APPLICATION_INFO.set_module('repbuhre2resection','Applied: '||vCnt*vLoadObjCnt);
----  END LOOP;
----  -- ждем, пока завершатся все джобы
----  Parallel_Tasks.endsession(sesid);
----
----  -- создаем индексы для указанной секции
----  restore_table_index('storages.repbuhre2resection');
----END;
----

CREATE OR REPLACE FUNCTION STORAGES.MAKE_REPBUHRE2RESECTION()
RETURNS VOID
  /*DELETE \*+ FULL ( a )*\ FROM storages.repbuhre2resection a;
  COMMIT;*/
   AS $procedure$
   DECLARE
   vMinIsn  DOUBLE PRECISION DEFAULT -1;
   vMaxIsn  DOUBLE PRECISION;

   vSql  VARCHAR(4000);
   SesId  DOUBLE PRECISION;
   vLoadObjCnt  DOUBLE PRECISION DEFAULT 1000;
   vCnt  DOUBLE PRECISION DEFAULT 0;
BEGIN
-- This function was converted on Thu Feb 20 09:37:37 2014 using Ispirer SQLWays 6.0 Build 2145 32bit Licensed to ak.
   EXECUTE 'truncate table storages.repbuhre2resection';

--   PERFORM STORE_AND_DROP_TABLE_INDEX('storages.repbuhre2resection',1);
--   SesId := PARALLEL_TASKS.CREATENEWSESSION();

--   LOOP
--      vMaxIsn := CUT_TABLE('ais.reaccsum','reaccisn',vMinIsn,pRowCount => vLoadObjCnt);
--      EXIT WHEN vMaxIsn IS NULL;
      vSql := 'DECLARE
              vMinIsn DOUBLE PRECISION DEFAULT ' || vMinIsn || ';
              vMaxIsn DOUBLE PRECISION DEFAULT ' || vMaxIsn || ';
              vCnt    DOUBLE PRECISION DEFAULT ' || vCnt || ';
            BEGIN
              /*DBMS_APPLICATION_INFO.SET_MODULE(''repbuhre2resection'',''Precess#''||vCNT);*/

              shared_system.SetParamN(''MinIsn'', vMinIsn);
              shared_system.SetParamN(''MaxIsn'', vMaxIsn);

              INSERT INTO storages.repbuhre2resection(
                                            bodyisn,dateval,statcode,subaccisn,buhcurrisn,
                                            buhdeptisn,buhamount,amount,docsumisn,docisn,
                                            dssubjisn,dscurrisn,dsclassisn,dsclassisn2,docsumpc,
                                            sectisn,secttype,sectdatebeg,sectdateend,sectcurrisn,sectpc,
                                            reaccisn,reaccdatebeg,reaccdateend,agrisn,agrclassisn,datebase,agrdatebeg,
                                            agrdateend, isrevaluation)  
              SELECT bodyisn,dateval,statcode,subaccisn,buhcurrisn,
                     buhdeptisn,buhamount,amount,docsumisn,docisn,
                     dssubjisn,dscurrisn,dsclassisn,dsclassisn2,docsumpc,
                     sectisn,secttype,sectdatebeg,sectdateend,sectcurrisn,sectpc,
                     reaccisn,reaccdatebeg,reaccdateend,agrisn,agrclassisn,datebase,agrdatebeg,
                     agrdateend, isrevaluation 
              FROM storages.v_repbuhre2resection;
              /*COMMIT;*/

           END;';
--      PERFORM PARALLEL_TASKS.PROCESSTASK(SesId,vSql);
--      vCnt := vCnt+1;
--      vMinIsn := vMaxIsn;
--      PERFORM DBMS_APPLICATION_INFO.SET_MODULE('repbuhre2resection','Applied: ' || vCnt*vLoadObjCnt);
--   END LOOP;
  -- ждем, пока завершатся все джобы
--   PERFORM PARALLEL_TASKS.ENDSESSION(SesId);

  -- создаем индексы для указанной секции
--   PERFORM RESTORE_TABLE_INDEX('storages.repbuhre2resection');
   RETURN;
END; $procedure$
LANGUAGE plpgsql;

